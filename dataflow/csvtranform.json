{
	"name": "csvtranform",
	"properties": {
		"description": "first dataflow",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataflow_source",
						"type": "DatasetReference"
					},
					"name": "csvsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataflowoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "columnselect"
				},
				{
					"name": "rowsfilter"
				},
				{
					"name": "Paymentbasedsplit",
					"description": "Splits based on payment "
				},
				{
					"name": "customerid"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> csvsource",
				"csvsource select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          cost,",
				"          quantity,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> columnselect",
				"columnselect filter(customer_id != 12) ~> rowsfilter",
				"rowsfilter split(payment == \"visa\",",
				"     payment == \"mastercard\",",
				"     payment == \"americanexpress\",",
				"     disjoint: false) ~> Paymentbasedsplit@(visa, mastercard, americanexpress)",
				"Paymentbasedsplit@visa aggregate(groupBy(customer_id),",
				"     {number of transactions} = count(transaction_id)) ~> customerid",
				"customerid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          transaction_id as string,",
				"          transactional_date as string,",
				"          product_id as string,",
				"          customer_id as string,",
				"          payment as string,",
				"          credit_card as string,",
				"          loyalty_card as string,",
				"          cost as string,",
				"          quantity as string,",
				"          price as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}